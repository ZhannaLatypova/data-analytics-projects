#!/usr/bin/env python
# coding: utf-8

# <div class="alert alert-block alert-info">
# <font size="5">
# <center><b>ПОИСК ЗАКОНОМЕРНОСТЕЙ В ДАННЫХ О ПРОДАЖЕ ИГР</b></center>
# </font>
#     </div> 

# <span class="mark">Описание проекта</span>\
#     Вы работаете в интернет-магазине «Стримчик», который продаёт по всему миру компьютерные игры. Из открытых источников доступны исторические данные о продажах игр, оценки пользователей и экспертов, жанры и платформы (например, Xbox или PlayStation). Вам нужно выявить определяющие успешность игры закономерности. Это позволит сделать ставку на потенциально популярный продукт и спланировать рекламные кампании.
#     Перед вами данные до 2016 года. Представим, что сейчас декабрь 2016 г., и вы планируете кампанию на 2017-й. Нужно отработать принцип работы с данными. Неважно, прогнозируете ли вы продажи на 2017 год по данным 2016-го или же 2027-й — по данным 2026 года.
#     В наборе данных попадается аббревиатура ESRB (Entertainment Software Rating Board) — это ассоциация, определяющая возрастной рейтинг компьютерных игр. ESRB оценивает игровой контент и присваивает ему подходящую возрастную категорию, например, «Для взрослых», «Для детей младшего возраста» или «Для подростков».
# 
# <span class="mark">Инструкция по выполнению проекта</span>
# 
# <font color='saddlebrown'>**Шаг 1. Откройте файл с данными и изучите общую информацию**</font>
# 
# Путь к файлу: /datasets/games.csv. Скачать датасет
# 
# <font color='saddlebrown'>**Шаг 2. Подготовьте данные**</font>
# 
# * Замените названия столбцов (приведите к нижнему регистру);
# * Преобразуйте данные в нужные типы. Опишите, в каких столбцах заменили тип данных и почему;
# * Обработайте пропуски при необходимости:
#   * Объясните, почему заполнили пропуски определённым образом или почему не стали это делать;
#   * Опишите причины, которые могли привести к пропускам;
#   * Обратите внимание на аббревиатуру 'tbd' в столбце с оценкой пользователей. Отдельно разберите это значение и опишите, как его обработать;
# * Посчитайте суммарные продажи во всех регионах и запишите их в отдельный столбец.
# 
# <font color='saddlebrown'>**Шаг 3. Проведите исследовательский анализ данных**</font>
# 
# * Посмотрите, сколько игр выпускалось в разные годы. Важны ли данные за все периоды?
# * Посмотрите, как менялись продажи по платформам. Выберите платформы с наибольшими суммарными продажами и постройте распределение по годам. За какой характерный срок появляются новые и исчезают старые платформы?
# * Возьмите данные за соответствующий актуальный период. Актуальный период определите самостоятельно в результате исследования предыдущих вопросов. Основной фактор — эти данные помогут построить прогноз на 2017 год.
# * Не учитывайте в работе данные за предыдущие годы.
# * Какие платформы лидируют по продажам, растут или падают? Выберите несколько потенциально прибыльных платформ.
# * Постройте график «ящик с усами» по глобальным продажам игр в разбивке по платформам. Опишите результат.
# * Посмотрите, как влияют на продажи внутри одной популярной платформы отзывы пользователей и критиков. Постройте диаграмму рассеяния и посчитайте корреляцию между отзывами и продажами. Сформулируйте выводы.
# * Соотнесите выводы с продажами игр на других платформах.
# * Посмотрите на общее распределение игр по жанрам. Что можно сказать о самых прибыльных жанрах? Выделяются ли жанры с высокими и низкими продажами?
# 
# <font color='saddlebrown'>**Шаг 4. Составьте портрет пользователя каждого региона**</font>
# 
# * Определите для пользователя каждого региона (NA, EU, JP):
# * Самые популярные платформы (топ-5). Опишите различия в долях продаж.
# * Самые популярные жанры (топ-5). Поясните разницу.
# * Влияет ли рейтинг ESRB на продажи в отдельном регионе?
# 
# <font color='saddlebrown'>**Шаг 5. Проверьте гипотезы**</font>
# 
# * Средние пользовательские рейтинги платформ Xbox One и PC одинаковые;
# * Средние пользовательские рейтинги жанров Action (англ. «действие», экшен-игры) и Sports (англ. «спортивные соревнования») разные.
# * Задайте самостоятельно пороговое значение alpha.
# 
# Поясните:
# * Как вы сформулировали нулевую и альтернативную гипотезы;
# * Какой критерий применили для проверки гипотез и почему.
# 
# <font color='saddlebrown'>**Шаг 6. Напишите общий вывод**</font>
# 
# Оформление: Выполните задание в Jupyter Notebook. Заполните программный код в ячейках типа code, текстовые пояснения — в ячейках типа markdown. Примените форматирование и заголовки.
# 
# <span class="mark">Описание данных</span>
# 
# `Name` — название игры\
# `Platform` — платформа\
# `Year_of_Release` — год выпуска\
# `Genre` — жанр игры\
# `NA_sales` — продажи в Северной Америке (миллионы проданных копий)\
# `EU_sales` — продажи в Европе (миллионы проданных копий)\
# `JP_sales` — продажи в Японии (миллионы проданных копий)\
# `Other_sales` — продажи в других странах (миллионы проданных копий)\
# `Critic_Score` — оценка критиков (максимум 100)\
# `User_Score` — оценка пользователей (максимум 10)\
# `Rating` — рейтинг от организации ESRB (англ. Entertainment Software Rating Board).\
# Эта ассоциация определяет рейтинг компьютерных игр и присваивает им подходящую возрастную категорию.\
# 
# *Данные за 2016 год могут быть неполными.*

# ### Откройте файл с данными и изучите общую информацию
# 
# 

# Подключим библиотеки 

# In[1]:


import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pylab as pylab
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
import warnings
warnings.filterwarnings('ignore')
import plotly.express as px
import math
import seaborn as sns
from scipy import stats as st


# Откроем файл `/datasets/games.csv`, сохраним датафрейм в переменную `games`

# In[2]:


games = pd.read_csv('https://code.s3.yandex.net/datasets/games.csv')


# Выведим первые 30 строк датафрейма `games`

# In[3]:


games.head(100)


# Выведим основную информацию для датафрейма `games` с помощью метода `info()`

# In[4]:


games.info()


# Посмотрим сводную статистику для датафрейма `games` с помощью метода `describe()`

# In[5]:


games.describe().T


# Проверим наличие пропусков в каждом столбце(%)

# In[6]:


pd.DataFrame(round(games.isna().mean()*100,)).style.background_gradient('BuPu') 


# Посмотрим пропущенные значения бары

# In[7]:


def pass_value_barh(df):
    try:
        (
            (df.isna().mean()*100)
            .to_frame()
            .rename(columns = {0:'space'})
            .query('space > 0')
            .sort_values(by = 'space', ascending = True)
            .plot(kind= 'barh', figsize=(19,6), rot = -5, legend = False, fontsize = 16, color = 'SlateGray')
            .set_title('Пропуски в датасете' + "\n", fontsize = 22, color = 'dimgray')    
        );    
    except:
        print('пропусков не осталось')


# In[8]:


pass_value_barh(games)


#  С помощью метода `hist()` выведим гистограммы для всех <span class="girk">столбцов.</span>

# In[9]:


params = {'axes.titlesize':'20',
          'xtick.labelsize':'20',
          'ytick.labelsize':'20'}

games.hist(figsize=(15, 10), color='SlateGray')
plt.show()


# <font color='saddlebrown'>**ВЫВОД**:</font> 
# <div style="border:solid saddlebrown 2px; padding: 20px"> 
# 
# В исходном датасете 16715 строк и 11 столбцов. 
# После того, как изучили датасет, выявили следующие первичные отклонения:
# 1) `Year_of_Release`- не соответствует тип колонки float64, 2% пустых значений \
# 2) `Critic_Score`- <font color='red'>**51%**</font> пустых значений,не соответствует тип колонки float64 \
# 3) `User_Score` - <font color='red'>**40%**</font> пустых значений\
# 4) `Rating`- <font color='red'>**40%**</font> пустых значений\
# 5) Названия столбцов указаны в верхнем регистре, замена на нижний.
# 
# </div>

# ### Подготовьте данные
# 
# * Замените названия столбцов (приведите к нижнему регистру);
# * Преобразуйте данные в нужные типы. Опишите, в каких столбцах заменили тип данных и почему;
# * Обработайте пропуски при необходимости:
# * Объясните, почему заполнили пропуски определённым образом или почему не стали это делать;
# * Опишите причины, которые могли привести к пропускам;
# * Обратите внимание на аббревиатуру 'tbd' в столбце с оценкой пользователей. Отдельно разберите это значение и опишите, как его обработать;
# * Посчитайте суммарные продажи во всех регионах и запишите их в отдельный столбец.

# #### Заменим названия столбцов к нижнему регистру
# 
# 

# In[10]:


games.columns = games.columns.str.lower()
games.head(3)


# #### Преобразуем столбцы к новому типу данных, обработаем пропуски, проверим дубликаты
# 
# 

# Проверим типы данных 

# In[11]:


games.info()


# Проверим наличие пустых значений по всем столбцам с помощью метода `isna()`
# 

# In[12]:


games.isna().sum()


# Проверим дубликаты

# In[13]:


games.duplicated().sum()


# ##### `name`

# Пустые значения удалим с помощью метода `.dropna()`, тк нельзя ничем их заменить и усреднить, количесво 2.

# In[14]:


games = games.dropna(subset = ['name'])


# Проверяем пустые значения

# In[15]:


games['name'].isna().sum()


# ##### `year_of_release`  

# Перед заменой типа данных в столбце Year_of_Release обработаем пустые значения в количестве 269 или 2%

# Заменим пропуски на год выпуска при совпадении названия игры, чтобы восстановить часть статистики.

# In[16]:


for i in games['name'].unique(): 
    games.loc[(games['name'] == i) & (games['year_of_release'].isna()), 'year_of_release'] =     games.loc[(games['name'] == i), 'year_of_release'].max()


# Проверяем пустые значения

# In[17]:


games['year_of_release'].isna().sum()


# Пустые значения удалим с помощью метода `.dropna()`, тк нельзя ничем их заменить и усреднить, количесво незначительное.

# In[18]:


games = games.dropna(subset = ['year_of_release'])


# Тип данных заменяем с помощью метода `.astype('Int64')`, чтобы мы смогли определить год выпуска игр.

# In[19]:


games['year_of_release'] = games['year_of_release'].astype('Int64')


# In[20]:


games['year_of_release'].head(3)


# Проверяем пустые значения

# In[21]:


games['year_of_release'].isna().sum()


# ##### `critic_score`

# Пропусков 8578 или 51%. Удалить нельзя, заменить медианным значение тоже нельзя

# Изучим к какой игре 'name' относится основная масса пропусков в параметре 'critic_score', после взгляда на таблицу все станет ясно, что делать дальше с пропусками.

# In[22]:


x = (
        games
         .value_counts('name')
        
         .to_frame()
         .rename(columns = {0:'count'})
    )



y = (
        games[games['critic_score'].isna()]
                .value_counts('name')).to_frame().rename(columns = {0:'count_gap'}
    )


z = x.join(y, how = 'outer').reset_index().sort_values(by = 'count', ascending = False).head(25)
z.style.format("{:,.0f}", subset = ['count_gap', 'count'])


# Тип данных заменяем с помощью метода `.astype('Int64')`, но сначала nan заменяем на "заглушку" -999

# In[23]:


games['critic_score'] = games['critic_score'].fillna(-999).astype('Int64')
games['critic_score'].head(3)


# Проверяем пустые значения

# In[24]:


games['critic_score'].isna().sum()


# ##### `user_score`

# Пропусков 6701 или 40%. Удалить нельзя, заменить медианным значение тоже нельзя

# Обратим внимание на аббревиатуру 'tbd' в столбце с оценкой пользователей. Разберем это значение и опишим, как его обработать

# TBD - аббревиатура от английского To Be Determined (будет определено) или To Be Decided (будет решено). Используется, если какая-то информация еще не определена или решение по вопросу не принято. Акроним служит для отметки неясностей или пропусков, которые надо заполнить, в информации требований.

# Тип данных заменяем с помощью метода `.astype('float')`, но сначала nan и tbd заменяем на "заглушку" -999

# In[25]:


games.loc[games['user_score'] == 'tbd', 'user_score'] = -999


# In[26]:


games['user_score'] = games['user_score'].fillna(-999).astype('float')


# In[27]:


games['user_score'].head(10)


# ##### `rating `

# Пропусков 6766 или 40%. Удалить нельзя, тк это сильно исказить статистику, заменим nan на unknown и это будет дополнительным критерием для фильтрации.

# In[28]:


games['rating'] = games['rating'].fillna('unknown')


# In[29]:


games['rating'].head(10)


# Проверим выбросы

# In[30]:


games.rating.value_counts().to_frame()


# Проверяем корректировки 

# In[31]:


games.info()


# Проверяем корректировки 

# In[32]:


games.isna().sum()


# Проверим полностью таблицу

# In[33]:


games.sample(50)


# Проверим количество строк и столбцов

# In[34]:


games.shape


# ##### Посчитаем суммарные продажи во всех регионах и запишим их в отдельный столбец.

# Создадим новый столбец total_sales_regions сложив все продажи

# In[35]:


games['total_sales_regions'] = games['na_sales'] + games['eu_sales'] + games['jp_sales'] + games['other_sales']
games.head(3)


# ### Исследовательский анализ 

# #### Посмотрим, сколько игр выпускалось в разные годы. Важны ли данные за все периоды?
# 

# Построим график, где покажем объем продаж по всем годам выпуска игр

# In[36]:


games_year_of_release = games.groupby('year_of_release')['name'].count().plot(grid=True, kind = 'line', figsize=(15, 5), color='#5f9bd6')
plt.title('Количество выпускаемых игр по годам') # название графика
plt.xlabel('Год') # подпись оси x
plt.ylabel('Объем продаж(млн.шт)') # подпись оси y
plt.plot(games.groupby('year_of_release')['name'].count(), 'o-', label='количество релизов', alpha=1)
plt.axvspan(1980, 1991, color='grey', label='стагнация', alpha=0.3)
plt.axvspan(1991, 2008, color='green', label='рост', alpha=0.3)
plt.axvspan(2008, 2016, color='red', label='спад', alpha=0.3)
plt.grid(True)
plt.legend();
plt.show()


# <span class="mark">**Наблюдение:**</span> Согласно графика, видно, что **с 1980 по 1990 гг** выпуск игр был незначительный и держался на уровне **до 50 игр**. **С 1990 по 2009 гг** наблюдается бум на рынке игр и количество выпускаемых игр увеличилось <font color='green'>**30 раз или на 3000%**</font>. Далее **после 2009 года** наблюдается <font color='red'>**спад**</font> выпуска игр, что может быть связано с появлением взаимозаменяемой продукции (современные мобильные устройства и приложения).

# #### Посмотрим динамику продаж по платформам. Выберите платформы с наибольшими суммарными продажами и постройте распределение по годам. За какой характерный срок появляются новые и исчезают старые платформы?  Возьмите данные за соответствующий актуальный период. Актуальный период определите самостоятельно в результате исследования предыдущих вопросов. Основной фактор — эти данные помогут построить прогноз на 2017 год. Какие платформы лидируют по продажам, растут или падают? Выберите несколько потенциально прибыльных платформ.
# Не учитывайте в работе данные за предыдущие годы.

# Построим график динамики продаж по платформам.

# In[37]:


platforms_year_of_release = games.pivot_table(index='platform', values='total_sales_regions', aggfunc='sum')                             .sort_values(by='total_sales_regions', ascending=False)                             .plot(grid=True, kind = 'bar', figsize=(15, 5), color='#5f9bd6')
                                                                          
plt.title('Динамика продаж по платформам (млн.шт)') # название графика
plt.xlabel('Название платформы') # подпись оси x
plt.ylabel('Объем продаж(млн.шт)') # подпись оси y
plt.show()


# <span class="mark">**Наблюдение:**</span> На графике видно, что в топ-6 вошли такие платформы, как PS2, X360, PS3, Wii, DS и PS.

# Выберим платформы с наибольшими суммарными продажами и построим распределение по годам. Берем первые 6 платформ, тк остальные значительно ниже по объемам продаж и создадим переменную `top_6_leaders`

# In[38]:


# Сгруппируем платформы и продажи, отфильтруем топ-6 лидеров продаж
top_6_leaders = games.pivot_table(index='platform', values='total_sales_regions', aggfunc='sum')                     .sort_values(by= 'total_sales_regions', ascending = False).head(6)                                                    
# Выведим на экран 
top_6_leaders.sort_values(by= 'total_sales_regions', ascending = False).reset_index()


# Построим таблицe "Динамика продаж всех игр за весь период"

# In[39]:


games_years_sales = games.pivot_table(index='platform', columns= 'year_of_release', values=['total_sales_regions'],               aggfunc={'total_sales_regions': 'sum' }).reset_index()

cm = sns.light_palette("#5f9bd6", as_cmap=True)

games_years_sales.style.background_gradient(cmap=cm)


# Напишем функцию **`year_top_6_leaders`**, которая выберет определенный период и платформы для построения графика, анализировать будем весь период, чтобы более детально можно посмотреть жизненный цикл платформы. 

# In[40]:


# Создадим функцию
def year_top_6_leaders(name, df):
    # Сделаем срез данных по названию платформы и году выпуска с 1980 г, чтобы полностью посмотреть динамику
    cut = df.loc[(df['platform'] == name) & (df['year_of_release'] >= 1980)]
    # Сгруппируем 
    #leaders = cut.groupby('year_of_release', sort=False)['total_sales_regions'].sum()
    leaders = cut.pivot_table(index='year_of_release', values='total_sales_regions', aggfunc='sum')                  .sort_values('year_of_release', ascending=False)
    return leaders


# Построим на графике распределение по годам

# In[41]:


# Создадим график
top_6_leaders = top_6_leaders.reset_index().rename_axis(None, axis=1)
plt.figure(figsize=(15,7)) # название графика
plt.grid(True) # сетка
plt.title('Динамика продаж основных лидеров с 1980 по 2016 гг')
plt.xlabel('Год выпуска') # подпись оси x
plt.ylabel('Объем продаж') # подпись оси y
 
# Создаем цикл 
for item in list(top_6_leaders['platform']): 
    sns.lineplot(data = year_top_6_leaders(item,games)['total_sales_regions'], label = item)
    plt.legend()


# <span class="mark">**Наблюдение:**</span> 
# * Средний жизненный цикл платформ в рамках 8 лет;
# * На графике четко прослеживается рост-пик-спад каждой платформы;
# * Основными сменяющими лидерами были PS, после него PS2 (PlayStation 2) и Wii;
# * В категорию **прибыльной платформы**, по факторам длительности существования и спроса, можно отнести **платформы PlayStation**.
# 
# <span class="girk">**"Первопроходцем"**</span> в игровой индустрии стала <font color='green'>**платформа DS**</font>, которая вышла на рынок в 1985 и ушла с рынка в 2013 году.\
# Основной подъем популярности платформы был в 2004 по 2008 гг. Предположительно, компания решила провести агрессивную маркетинговую кампанию по увеличению спроса на продукт.
# 
# <span class="girk">**"Инноватором"**</span> стала <font color='green'>**платформа PS2 (PlayStation 2)**</font>, которая занимала лидирующие позиции с 2000 по 2004 гг. и послужила мощным толчком в индустрии ирг, после чего пришло на рынок много играков. После 2004 до 2011 наблюдается спад и пониженный спрос. 
# 
# C 2004 по 2005 гг на рынок вышли новые платформы, такие как PS3 (замена PS2), Х360 и Wii, с основным пиком в 5 лет, после чего последовал резкий спад. 
# 
# 
# 

# #### Постройте график «ящик с усами» по глобальным продажам игр в разбивке по платформам. Опишите результат.

# **За актуальный период для дальнейшего анализа возьмем 3 года (с 2012 по 2015 гг. включительно)**
# 

# In[42]:


# Обновим датасет с новым периодом для дальнейшего анализа 

games_update = games.loc[(games['year_of_release'].isna()) | (games['year_of_release']>= 2013)                & (games['year_of_release']<=2016)]


# In[43]:


games_update.info() 


# Построим коробчатую диаграмму размаха ("ящик с усами") и сохраним данные в переменной `games_boxplot`, удалим выбросы по объему продаж от 2 млн. копий

# In[44]:


games_boxplot = games_update.loc[(games_update['total_sales_regions'] <= 2)] 

plt.show()

sns.set(rc={'figure.figsize':(15,8)})
ax = sns.boxplot(x='platform', y='total_sales_regions', data=games_boxplot)
plt.title("Диаграмма размаха по глобальным продажам игр в разбивке по платформам", fontsize=15)
plt.xlabel('Название платформы') # подпись оси x
plt.ylabel('Объем продаж(млн.шт)') # подпись оси y
plt.show()


# <span class="mark">**Наблюдение:**</span> 
# * **Максимальный годовой объем продаж** в диапозоне 1 -1.4 млн.копий показали такие платформы, как Х360, PS4, ХOne и WiiU; 
# * **Медианные значения** у всех разные и находятся в диапозоне от 50 до 240 тыс. копий;
# * **Минимальный годовой объем продаж** по нашей выборке примерно 20  тыс.копии;
# * **Выбросы** - это значения, которые очень далеки от общей выборки. В данном случаи, все что выше 2 млн.копий мы удалили.

# #### Посмотрите, как влияют на продажи внутри одной популярной платформы отзывы пользователей и критиков. Постройте диаграмму рассеяния и посчитайте корреляцию между отзывами и продажами. Сформулируйте выводы. Соотнесите выводы с продажами игр на других платформах.

# ##### Диаграмма рассеяния (отзывы пользователей и продажи)

# Построим диаграмму рассеяния, убрав из данных заглушки и выбросы более 10 млн. копий

# In[45]:


# Уберем заглушки (-999) и выбросы (total_sales_regions < 10)
games_update[games_update['user_score'] > -999].query('total_sales_regions < 10')                     .plot(kind='scatter', y='user_score'                    , x='total_sales_regions', alpha=0.5, subplots=True, figsize=(15,8), c = 'g', s = 4)
plt.title('Диаграмма рассеяния — Общий объем продаж — отзывы пользователей')
plt.xlabel('Объем продаж(млн.шт)') # подпись оси x
plt.ylabel('Оценка пользователей') # подпись оси y
plt.show()

# Рассчитаем корреляцию
games_update[['user_score','total_sales_regions']].corr()


# <span class="mark">**Наблюдение:**</span> На диаграмме видно, что прямой корреляции между оценкой пользователей и продажами нет. Согласно Шкале Чеддока, коэффициент корреляции **0.16** определим, как **"слабая"** связь.

# ##### Диаграмма рассеяния (отзывы критиков и продажи)

# Построим диаграмму рассеяния, убрав из данных заглушки и выбросы более 10 млн. копий

# In[46]:


# Уберем заглушки (-999) и выбросы (total_sales_regions < 10)
games_update[games_update['critic_score'] > -999].query('total_sales_regions < 10').plot(kind='scatter', y='critic_score'                    , x='total_sales_regions', alpha=0.5, subplots=True, figsize=(15,8), c = 'b', s = 4)
plt.title('Диаграмма рассеяния — Общий объем продаж — оценка критиков')
plt.xlabel('Объем продаж(млн.шт)') # подпись оси x
plt.ylabel('Оценка критиков') # подпись оси y
plt.show()

# Рассчитаем корреляцию
games_update[['total_sales_regions','critic_score']].corr()


# <span class="mark">**Наблюдение:**</span> На диаграмме видно, что прямой корреляции между оценкой критиков и продажами нет. Согласно Шкале Чеддока, коэффициент корреляции **0.17** определим, как **"слабая"** связь.
# 
# Есть предположение, что данные оценки, в тот период времени, не были широко офишированны в СМИ и в общем доступе не находились. Возможно данные собирались только для личного пользования компаниями и не влияли на выбор потребителей.

# **Рассмотрим влияние на продажи игр для платформы PS4 отзывов пользователей и критиков.**

# In[47]:


games_new = games_update[(games_update['user_score'] > -999)|
                             (games_update['critic_score'] > -999)].query('total_sales_regions < 10')


# Рассмотрим влияние на продажи игр для платформы PS4 отзывов пользователей и критиков.

# In[48]:


games_update_critic = games_update[(games_update['critic_score'] > -999)].query('total_sales_regions < 10')

games_update_user = games_update[(games_update['user_score'] > -999)].query('total_sales_regions < 10')

fig = plt.figure()

ax_1 = fig.add_subplot(1, 2, 1)
ax_2 = fig.add_subplot(1, 2, 2)

sns.scatterplot(data=games_update_critic.query('platform == "PS4"'),
                x='critic_score', y='total_sales_regions', 
                color='red', alpha=0.5,  
                ax=ax_1)

sns.scatterplot(data=games_update_user.query('platform == "PS4"'),
                x='user_score', y='total_sales_regions', 
                color='orange', alpha=0.5,
                ax=ax_2)

ax_1.set_title('Диаграмма рассеяния PS4: оценка критика - продажи')
ax_2.set_title('Диаграмма рассеяния PS4: оценка пользователей - продажи')


fig.set_figwidth(20)
fig.set_figheight(7)

plt.show()


# <span class="mark">**Наблюдение:**</span> 
# 
# По данным диаграмам можно сделать вывод, что большей популярностью пользуются игры:
# 
# * имеющие пользовательский рейтинг более 6 баллов;
# * имеющие оценку критиков более 60 баллов;
# * игр с пользовательской оценкой в 10 баллов не обнаружено

# In[49]:


corr_ps4_user = games_update_user.query('platform == "PS4"')
print('Корреляция между оценками пользователей и продажами:',       corr_ps4_user['user_score'].corr(corr_ps4_user['total_sales_regions']))


# <span class="mark">**Наблюдение:**</span> 
# Корреляция между оценками пользователей и продажами PS4 не выявлена.

# Рассмотрим влияние на продажи игр для платформы XOne отзывов пользователей и критиков.

# In[50]:


#построим диаграммы рассеяния для Xone
fig = plt.figure()

ax_1 = fig.add_subplot(1, 2, 1)
ax_2 = fig.add_subplot(1, 2, 2)

sns.scatterplot(data=games_update_critic.query('platform == "XOne"'),
                x='critic_score', y='total_sales_regions', 
                color='blue', alpha=0.5,  
                ax=ax_1)

sns.scatterplot(data=games_update_user.query('platform == "XOne"'),
                x='user_score', y='total_sales_regions', 
                color='green', alpha=0.5,
                ax=ax_2)

ax_1.set_title('Диаграмма рассеяния XOne: оценка критика - продажи')
ax_2.set_title('Диаграмма рассеяния XOne: оценка пользователей - продажи')


fig.set_figwidth(20)
fig.set_figheight(7)

plt.show()


# In[51]:


corr_XOne_user = games_update_user.query('platform == "XOne"')
print('Корреляция между оценками пользователей и продажами:',       corr_XOne_user['user_score'].corr(corr_XOne_user['total_sales_regions']))


# <span class="mark">**Наблюдение:**</span> 
# У игр платформы XOne корреляция продаж от оценок идентична с платформой PS4, слабая зависимость от оценки критиков (коэффициент корреляции) и отсуствующая зависимость от оценки пользователей (коэффициент корреляции).

# #### Посмотрите на общее распределение игр по жанрам. Что можно сказать о самых прибыльных жанрах? Выделяются ли жанры с высокими и низкими продажами?

# Сформируем таблицу с количесвом игр и общие продажи в разрезе всех жанров. Отфильтруем столбец total_sales_regions по убыванию для наглядности.

# In[52]:


genre_total = games_update.groupby('genre').agg({'name': 'count', 'total_sales_regions': 'sum'})                                    .sort_values('total_sales_regions', ascending=False)                                    .reset_index()

genre_total.style.bar(subset=['name', 'total_sales_regions'], color='#5fd6d6')


# **Построим график распределения медианных продаж, количества игр в разрезе жанров**

# In[53]:


plt.figure(figsize=(15,8))
sns.boxplot(data=games_update, x='genre', y='total_sales_regions')
plt.ylim([0, 2])
plt.xlabel('Жанры', fontsize=15)
plt.ylabel('Количество проданных игр, млн копий', fontsize=15)
plt.title('Распределение игр по жанрам', fontsize=20);


# <span class="mark">**Наблюдение:**</span> 
# * Медианные продажи выше всего в жанре shooter, на втором месте sports, на третьем platform
# * Согласно вышеуказанной таблице, наиболее **прибыльными и популятными** жанрами стали Action, Shooter, Role-Playing и Sports. 
# * Жанр Adventure можно отнести с **низкоприбыльным**, тк при большом количестве игр, продажи крайне малы.
# * Жанр Shooter можно выделить среди прибыльных, тк при меньшем количестве игр, они заняли второе место по объему продаж.

# ### Составьте портрет пользователя каждого региона
# 
# * Определите для пользователя каждого региона (NA, EU, JP):
#  - Самые популярные платформы (топ-5). Опишите различия в долях продаж.
#  - Самые популярные жанры (топ-5). Поясните разницу.
# * Влияет ли рейтинг ESRB на продажи в отдельном регионе?

# In[54]:


#регионы для анализа
regions = ['na_sales', 'eu_sales', 'jp_sales']


# In[55]:


#функция вывода гистограмм по регионам в разрезе параметра plot_index

def region_plot (plot_index):
    '''функция построения гистограмм распределения продаж в разрезе ТОП-5 
       заданного параметра по каждому региону исследования'''
    
    fig, axs = plt.subplots(1, 3, figsize=(18,6))
    
    for i in range(len(regions)):
        
        df_i = games_update.groupby(plot_index)[regions[i]].sum().reset_index().sort_values(by=regions[i], ascending=False).head(5)
        #print(df_i)
        axs[i].bar(df_i[plot_index], df_i[regions[i]], color='maroon')
        axs[i].set_title(regions[i])
    
    plt.show() 


# In[56]:


#функция вывода круговой диаграммы по регионам в разрезе параметра plot_index

def region_plot_pie (plot_index):
    '''функция построения гистограмм распределения продаж в разрезе ТОП-5 
       заданного параметра по каждому региону исследования'''
    
    fig, axs = plt.subplots(1, 3, figsize=(18,6))
    
    for i in range(len(regions)):
        
        df_i = (games_update
                .groupby(plot_index)[regions[i]]
                .agg('sum')
                .reset_index()
                .sort_values(by=regions[i], ascending=False)
                .head(5)
                )
        sale_other = (games_update[regions[i]].sum() - df_i[regions[i]].sum()).round(2)
        df_i.loc[len(df_i.index)] = ['Others', sale_other]
        #print(df_i)
        axs[i].pie(df_i[regions[i]], labels=df_i[plot_index], autopct='%1.0f%%', pctdistance=0.7)
        axs[i].set_title(regions[i])
    
    plt.show()


# ####  Сводная по регионам (NA, EU, JP) 

# Создадим таблицу в разрезе платформ и продаж каждого региона с 2013 по 2016 гг.

# In[57]:


regions_platforms = games_update.pivot_table(index='platform', values=['na_sales', 'eu_sales', 'jp_sales'],               aggfunc={'na_sales': 'sum', 'eu_sales': 'sum', 'jp_sales': 'sum' }).reset_index()

regions_platforms.style.bar(subset=['na_sales', 'eu_sales', 'jp_sales'], color='#c5e89f')


# Найдем самые популярные платформы (топ-5) и укажем долю продаж.

# In[58]:


# Сгруппируем платформы и продажи по регионам в период с 2013 по 2016 гг. и создадим круговую диаграмму
region_plot_pie('platform')


# <span class="mark">**Наблюдение:**</span> Согласно вышеуказанным данным, можно сделать следующее заключение:
# * `Северная Америка`: в топ 5 по объему продаж вошли такие платформы, как **PS4(25%), XOne(21%) Х360(19%), PS3(15%) и 3DS(9%)** 
# 
# * `Европа`: в топ 5 по объему продаж вошли такие платформы, как **PS4(36%), PS3(17%), Х360(12%), XOne(13%) и PC(7%)** 
# 
# * `Япония`: в топ 5 по объему продаж вошли такие платформы, как **3DS(48%), PS3(17%), PSV(13%),  PS4(11%) и WiiU(8%)**  
# 
# <span class="girk">Стоит отметить, что предпочтения пользователей в Северной Америке и Европе практически совпали по популярности одних и тех же платфор, что нельзя сказать про Японию, которая имеет основного "любимчика" 3DS и отдает ему 48% доли рынка.</span>   

# **Найдем самые популярные жанры (топ-5) и укажем долю продаж.**

# Создадим таблицу в разрезе платформ и продаж каждого региона с 2013 по 2016 гг.

# In[59]:


regions_genre = games_update.pivot_table(index='genre', values=['na_sales', 'eu_sales', 'jp_sales'],               aggfunc={'na_sales': 'sum', 'eu_sales': 'sum', 'jp_sales': 'sum' }).reset_index()

regions_genre.style.bar(subset=['na_sales', 'eu_sales', 'jp_sales'], color='#c5e89f')


# In[60]:


# Сгруппируем жанры и продажи по регионам в период с 2013 по 2016 гг. и создадим круговую диаграмму
region_plot_pie('genre')


# <span class="mark">**Наблюдение:**</span> Согласно вышеуказанным данным, можно сделать следующее заключение:
# * `Северная Америка`: в топ 5 по объему продаж вошли такие жанры, как **Action(29%), Shooler(25%), Sports(15%), Role-Playing(11%) и Misc(6%)**  
# 
# * `Европа`: в топ 5 по объему продаж вошли такие жанры, как **Action(30%), Shooler(22%), Sports(15%), Role-Playing(9%) и Misc(6%)**  
# 
# * `Япония`: в топ 5 по объему продаж вошли такие платформы, как **Role-Playing(36%), Action(29%), Misc(7%),  Fighting(5%) и Shooler(5%)**  
# 
# <span class="girk">Стоит отметить, что предпочтения пользователей в Северной Америке и Европе практически совпали по популярности одних и тех же жанров, что нельзя сказать про Японию, которая отдала 65% доли объемов продаж на два жанра Role-Playing и Action . </span> 
# 

# #### Влияет ли рейтинг ESRB на продажи в отдельном регионе?

# Расшифровка рейтингов:
# 
# * «E» («Everyone») — «Для всех» от 6 лет
# * «E10+» («Everyone 10 and older») — «Для всех от 10 лет и старше»
# * «T» («Teen») — «Подросткам» от 13 лет
# * «M» («Mature») — «Для взрослых» от 17 лет

# In[61]:


# Исключим из анализа данные unknown
#games_update_rating = games_update.query('rating != "unknown"')

# Сгруппируем данные методом pivot_table по рейтингу странам 
regions_rating = games_update.pivot_table(index='rating', values=['na_sales', 'eu_sales', 'jp_sales'],               aggfunc={'na_sales': 'sum', 'eu_sales': 'sum', 'jp_sales': 'sum' }).reset_index()

# Отформатируем ячейки для наглядности
regions_rating.style.bar(subset=['na_sales', 'eu_sales', 'jp_sales'], color='#c5e89f')


# In[62]:


# круговая диаграмма для каждого региона
region_plot_pie('rating')


# <span class="mark">**Наблюдение:**</span> Согласно вышеуказанным данным, можно сделать следующее заключение:
# * `Северная Америка`: основное предпочтение отдано рейтингу **«M» («Mature») — «Для взрослых» и «E» («Everyone») — «Для всех»**  
# 
# * `Европа`: основное предпочтение отдано рейтингу **«M» («Mature») — «Для взрослых» и «E» («Everyone») — «Для всех»**   
# 
# * `Япония`: основное предпочтение отдано рейтингу **«E» («Everyone») — «Для всех» и «T» («Teen») — «Подросткам»**  
# 
# <span class="girk">Стоит отметить, что рейтинги в Северной Америке и Европе совпали, а в Японии, также кроме рейтинга "для всех", сильно выделился рейтинг "для подростков", что говорит, о высокой заинтересованности среди подростков от 13 лет. </span> 

# <p></p>
# <div style="border:solid green 2px; padding: 20px">
#        ОБЩИЙ ВЫВОД ПО ПОРТРЕТУ ПОТРЕБИТЕЛЯ ИГР ПО КАЖДОМУ РЕГИОНУ
#     
#    
# `Северная Америка`: 
#     
# * Самые популярные игровые платформы это: PS4, XOne, Х360, PS3, 3DS. 
# * Топ 5 жанров в северной америке : action, shooler, sports, role-playing и misc
# * По рейтингам видно, что больше всего продаж у игр с рейтингом «Для взрослых» от 17 лет, на втором месте игры с рейтингом «Для всех»
# 
# `Европа`: 
# * Самые популярные игровые платформы это: PS4, PS3, Х360, XOne и PC 
# * Топ 5 жанров в Европе : action, shooler, sports, role-playing и misc
# * По рейтингам видно, что больше всего продаж у игр с рейтингом «Для взрослых» от 17 лет, на втором месте игры с рейтингом «Для всех»
# 
# `Япония`: 
# * Самые популярные игровые платформы в Японии это: 3DS, PS3, PSV,PS4 и WiiU 
# * Топ 5 жанров в Японии : role-playing, action, misc,  Fighting и shooler 
# * По рейтингам видно, что больше всего продаж у игр с рейтингом "для всех", на втором месте игры с рейтингом «Подросткам» от 13 лет.   
# * Большую долю рынка, занимают игры без рейтинга ESBR, особенно в Японии. Это говорит о том, что игры, которые производятся не в Северной Америке и Канаде, особого значения не придают этому рейтингу и соответвенно не подают документы на присвоение рейтинга данной организацией. Тем более, что и и в Европе и в Японии имеются свои рейтинги: - Pan European Game Information (PEGI) — европейская рейтинговая система компьютерных игр - Computer Entertainment Rating Organization (CERO) — японская некоммерческая организация, занимающаяся присуждением рейтингов компьютерным играм и программному обеспечению для их последующей продажи на территории Японии. 
#     
#  <span class="mark">Данные для прогноза лучше брать в ретроспективе за 3 года, чтобы был достаточный массив данных для выборки и данные не были устаревшими, так как индустрия игр довольна динамичная.</span>
# 
#     
#  
# </div>  

# ### Проверьте гипотезы
# 
# * Средние пользовательские рейтинги платформ Xbox One и PC одинаковые;
# * Средние пользовательские рейтинги жанров Action (англ. «действие», экшен-игры) и Sports (англ. «спортивные соревнования») разные.
# * Задайте самостоятельно пороговое значение alpha.

# Для проверки двух гипотез выберем метод `scipy.stats.ttest_ind`( гипотеза о равенстве средних двух совокупностей)
# 
# Три аспекта, которые должны быть соблюдены:
# * генеральная совокупность не должна зависеть друг от друга;
# * выборочная средняя должна быть нормально распределена;
# * дисперсии рассматриваемых генеральных совокупностей должны быть равны

# #### Проверка гипотезы №1:  "Средние пользовательские рейтинги платформ Xbox One и PC одинаковые"

# <span class="girk">Формулировка гипотез:</span>
# 
# * `Нулевая гипотеза(H_0)`: user_score_Xbox  = user_score_PC- Средние пользовательские рейтинги платформ Xbox One и PC **одинаковые**
# * `Альтернативная гипотеза (H_a)`: user_score_Xbox ≠ user_score_PC- Средние пользовательские рейтинги платформ Xbox One и PC **разные**
# 
# alpha = 0.05 - выберим данный уровень значимости (вероятный порог "необычности")
# 
# **user_score_Xbox** - средний пользовательский рейтинг платформы Xbox One\
# **user_score_PC** -  средний пользовательский рейтинг платформы PC

# In[63]:


# Сделаем срез данных использовав метод `query` выбрав определенную платформу для анализа, исключив выбросы. 
user_score_Xbox = games_update.query('platform == "XOne" & user_score > 0')['user_score']

user_score_PC = games_update.query('platform == "PC" & user_score > 0')['user_score']
 
results = st.ttest_ind(
   user_score_Xbox, 
   user_score_PC, equal_var = False) # results = вызов метода для проверки гипотезы
 
alpha = .05 # alpha уровнь значимости
 
print(results.pvalue) # вывод значения p-value на экран 

if results.pvalue < alpha:
    print("Отвергаем нулевую гипотезу")
else:
    print("Не получилось отвергнуть нулевую гипотезу")# условный оператор с выводом строки с ответом


# Найдем дисперссию двух генеральных совокупностей
# 
# Данные не равны, возможно ее не нужно искать в учебных целях :-)

# In[64]:


a = np.var(user_score_Xbox)
b = np.var(user_score_PC)
print(np.average(a))
print(np.average(b))


# Перепровека: Посчитаем пользовательские рейтинги платформ Xbox One и PC

# In[65]:


user_score_Xbox.mean() 


# In[66]:


user_score_PC.mean()


# Построим гистограмму распределения среднего пользовательского рейтинга платформ Xbox One и PC

# In[67]:


games_update.query('platform == ["XOne","PC"] & user_score > 0').groupby('platform')['user_score']                                                             .plot(kind='hist', bins=20, alpha=0.5)
plt.legend(["XOne","PC"])
plt.xlabel('Оценка пользователей')
plt.ylabel('Объем продаж')
plt.show()


# <span class="mark">**Наблюдение:**</span> Вероятность *p-value* высока и равна 96%, что говорит о том, что нулевая гипотеза верна и значима. Кроме этого, данные математического расчета также это подтвердили. На гистограмме видно, многочисленное совпадение оценки пользователей двух платформ.

# #### Проверка гипотезы №2: "Средние пользовательские рейтинги жанров Action (англ. «действие», экшен-игры) и Sports (англ. «спортивные соревнования») разные"

# <span class="girk">Формулировка гипотез:</span>
# 
# * `Нулевая гипотеза(H_0)`: user_score_Action  = user_score_Sports- Средние пользовательские рейтинги жанров Action и Sports **одинаковые**
# * `Альтернативная гипотеза (H_a)`: user_score_Action ≠ user_score_Sports- Средние пользовательские рейтинги жанров Action и Sports **разные**\
# 
# alpha = 0.05- выберим данный уровень значимости (вероятный порог "необычности")
# 
# **user_score_Action** - средний пользовательский рейтинг жанра Action (англ. «действие», экшен-игры)\
# **user_score_Sports** -  средний пользовательский рейтинг жанра Sports (англ. «спортивные соревнования»)

# In[68]:


user_score_Action = games_update.query('genre == "Action" & user_score > 0')['user_score']

user_score_Sports = games_update.query('genre == "Sports" & user_score > 0')['user_score']
 
results = st.ttest_ind(
   user_score_Action, 
   user_score_Sports, equal_var = False) # results = вызов метода для проверки гипотезы
 
alpha = .05 # alpha уровнь значимости
 
print(results.pvalue) # вывод значения p-value на экран 

if results.pvalue < alpha:
    print("Отвергаем нулевую гипотезу")
else:
    print("Не получилось отвергнуть нулевую гипотезу")# условный оператор с выводом строки с ответом


# Перепровека: Посчитаем средние пользовательские рейтинги жанров Action и Sports

# In[69]:


user_score_Action.mean()


# In[70]:


user_score_Sports.mean()


# Построим гистограмму распределения среднего пользовательского рестинга жанров Action и Sports

# In[71]:


games_update.query('genre == ["Action","Sports"] & user_score > 0').groupby('genre')['user_score']                                                             .plot(kind='hist', bins=20, alpha=0.5)
plt.legend(['Action','Sports'])
plt.xlabel('Оценка пользователей')
plt.ylabel('Объем продаж')
plt.show()


# <span class="mark">**Наблюдение:**</span>  Получив крайне маленькое значение p-value, мы отвергли Нулевую гипотезу. Таким образом, у нас практически нет вероятности получить одинаково средние рейнтинги по двум жанрам. Перепроверка математическим путем и визуализация гистограммы нам это тоже показала.

# ### Напишите общий вывод

# <div style="border:solid gray 2px; padding: 20px">
#     
# Изучив данные из открытых источников, в котором содержалось 16715 строк и 11 столбцов о продажах игр, оценки пользователей и экспертов, жанры и платформы, нам нужно было выявить определяющие успешность игры закономерности. 
#     
# Предже, чем приступить к исследовательской работе, необходимо было сделать предобработку данных, а именно: привести в соответствие типы данных, обработать пустые значения, заменить верхний регистр, на нижний, проверить дубликаты, обработать выбросы (анамалии).   
#   Если в данных наблюдались пропуски, они заменялись на среднию или медианную величину в разрезе, но в большей части заполнялись заглушками (-999), тк медианными значениями заполнить невозможно по причине отсутствия 100% совпадения по признаку.
#     
#   Согласно историческим данным, основной "бум" на рынке игр наблюдался с 1990 по 2009 гг, где количество выпускаемых игр увеличилось в 30 раз или на 3000%. Далее после 2009 года наблюдается спад выпуска игр, что могло быть связано с появлением взаимозаменяемой продукции (современные мобильные устройства и приложения), далее стремительное падение до конца 2016 года. Топ-6 вошли такие платформы, как PS2, X360, PS3, Wii, DS и PS.
#     
#   Проанализировав жизненный цикл платформ, было выявлено следующее:    
#  - средний жизненный цикл платформ в рамках 8 лет;
#  - основными сменяющими лидерами были PS, после него PS2 (PlayStation 2) и Wii;
#  - в категорию **прибыльной платформы**, по факторам длительности существования и спроса, можно отнести **платформы PlayStation**.
#  - **"первопроходцем"** в игровой индустрии стала **платформа DS**, которая вышла на рынок в 1985 и ушла с рынка в 2013 году.
#  -**"инноватором"**  стала **платформа PS2 (PlayStation 2)**, которая занимала лидирующие позиции с 2000 по 2004 гг. и послужила мощным толчком в индустрии ирг, после чего пришло на рынок много играков. После 2004 до 2011 наблюдается спад и пониженный спрос. 
#     - максимальный годовой объем продаж в диапозоне 1-1.5 млн.копий показали такие платформы, как Х360, PS4, ХOne и WiiU;
#     
# Посмотрев на корреляцию между оценкой пользователей, оценкой критиков и продажами, прямой зависимости не обнаружено. Согласно Шкале Чеддока, коэффициент корреляции находиться в диапозоне **0.12-0.17** определим, как **"слабая"** связь. Есть предположение, что данные оценки, в тот период времени, не были широко офишированны в СМИ и в общем доступе не находились. Возможно данные собирались только для личного пользования компаниями и не влияли на выбор потребителей. 
#     Наиболее прибыльными и популятными жанрами стали Action, Shooter, Role-Playing и Sports.
# 
# Если говорить про портрет потребилеля, то стоит отметить, что предпочтения пользователей в Северной Америке и Европе практически совпали по популярности одних и тех же платформ(PS4, PS3, Х360, XOne и 3DS), жанров(action, shooler, sports, role-playing и misc) и рейтингов(«Для взрослых» от 17 лет и «Для всех"), что нельзя сказать про Японию, которая предпочитает такие платформы, как(3DS, PS4), жанры(Role-Playing, Action) и рейтинг( «Для всех» и «Подросткам» от 13 лет).
# 
# **`После проведенной работы, можно сделать следующее заключение:`**
# продажа игр четко имеет зависимость от территориальной принадлежности пользователей и тех платформ, которые в данном регионе наиболее популярны.\
#     Для рынка Азии - это будет платформа 3DS с типами жанров ролевые игры и экшен. \
#     Для западного рынка больше подойдут продажи игр с платформами PS4 с жанрами экшен и игры с огнестрельным оружием.
#     
# **Рекомендации:**
# 
# При планировании продаж игр, следует определиться с рынком, на котором магазин, хотел бы сконцентрироваться, так как для каждого региона свой портрет пользователя.
# 
# На планируемый 
#  год следует обратить внимание на игры для следующих платформ:
# 
# PS4
# XOne
# 3DS
# WiiU
# Наиболее перспективными жанрами игр являются:
# 
# Shooter
# Sports
# Platform
# Role-Playing
# Action
# Для пользователей Северной Америки и Европы наиболее перспективными играми будут являться игры для PS4 в жанрах Shooter и Sports.
# 
# Для жителей Японии, не смотря на постепенное снижение спроса, актуальными остаются игры для 3DS в жанре Role-Playing. При выборе игр пользоватетели больше ориентируются на оценки критиков, чем на пользовательские рейтинги.    
#     
# </div>

# In[ ]:




